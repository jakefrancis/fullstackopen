{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","changeNote","returnedNote","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4NAceA,EAZF,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAKC,EAAsB,EAAtBA,iBACVC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACA,wBAAIC,UAAU,QACXJ,EAAKK,QACR,4BAAQC,QAASL,GAAmBC,KCKzBK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAe,OAAZA,EACQ,KAIP,yBAAKJ,UAAU,SACVI,ICQEC,EAfA,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,8D,gBCMG,EAfA,WAEX,OADgBC,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVC,SAAAC,GAEZ,OADiBL,IAAMM,KARX,aAQyBD,GACtBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAbJ,aAaI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCwF5BK,EAhGL,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIcJ,oBAAS,GAJvB,mBAITK,EAJS,KAIAC,EAJA,OAKwBN,mBAAS,MALjC,mBAKTO,EALS,KAKKC,EALL,KAiBhBC,qBATa,WACXC,IAEGlB,MAAK,SAAAmB,GACJT,EAASS,QAKC,IAKhB,IAuCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAArC,GAAI,OAAIA,EAAKG,aAE5B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAASuB,IACvB,6BACE,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACQA,EAAU,YAAa,QAGjC,4BACGO,EAAYE,KAAI,SAAAtC,GAAI,OACnB,kBAAC,EAAD,CACEuC,IAAKvC,EAAKqB,GACVrB,KAAMA,EACNC,iBAAkB,kBArCL,SAACoB,GACxB,IAAMrB,EAAOyB,EAAMe,MAAK,SAAAxC,GAAI,OAAIA,EAAKqB,KAAOA,KACtCoB,EAAU,2BAAOzC,GAAP,IAAaG,WAAYH,EAAKG,YAC9C+B,EACUb,EAAGoB,GACVzB,MAAK,SAAA0B,GACNhB,EAASD,EAAMa,KAAI,SAAAtC,GAAI,OAAIA,EAAKqB,KAAOA,EAAKrB,EAAO0C,SAEpDC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACJhC,EAAKK,QADD,sCAGfwC,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAArC,GAAI,OAAIA,EAAKqB,KAAOA,SAsBVpB,CAAiBD,EAAKqB,KAC9CnB,MAAS,eAIf,0BAAM4C,SA9DI,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB5C,QAASsB,EACTuB,KAAM,IAAIC,KACVhD,UAAWiD,KAAKC,SAAW,IAG9BnB,EACSe,GACPjC,MAAK,SAAA0B,GACJhB,EAASD,EAAM6B,OAAOZ,IACtBd,EAAW,SAmDP,2BACA2B,MAAO5B,EACP6B,SAjDiB,SAACT,GACxBnB,EAAWmB,EAAMU,OAAOF,UAkDlB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC1FRC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.6e18fcc3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note,toggleImportance}) => {\n    const label = note.important\n      ? 'make not important' : 'make important'\n\n    return (\n    <li className='note'>\n      {note.content}\n    <button onClick={toggleImportance}>{label}</button>\n    </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({message}) => {\n    if(message === null) {\n        return null\n    }\n\n    return (\n        <div className='error'>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br></br>\n            <em>Take some notes ✏️</em>\n        </div>\n    )\n}\n\nexport default Footer","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create =  newObject => {\n    const request =  axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default {getAll, create, update}","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\n\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  \n  const hook = () => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n\n  }\n\n  useEffect(hook, [])\n\n\n\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() > 0.5,\n    }\n    \n   noteService\n    .create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportance = (id) => {\n    const note = notes.find(note => note.id === id )\n    const changeNote = {...note, important: !note.important}\n    noteService\n      .update(id,changeNote)\n      .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server` \n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(note => note.id !== id))\n    })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n    return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message={errorMessage}/>\n        <div>\n          <button onClick={() => setShowAll(!showAll)} >\n            show {showAll ? 'important': 'all'}\n          </button>\n        </div>\n        <ul>\n          {notesToShow.map(note => \n            <Note \n              key={note.id} \n              note={note} \n              toggleImportance={() => toggleImportance(note.id)}\n              label = {'delete'}\n            />\n          )}\n        </ul>\n        <form onSubmit={addNote}>\n          <input \n          value={newNote}\n          onChange={handleNoteChange} \n          />\n          <button type='submit'>save</button>\n        </form>\n        <Footer />\n      </div>\n    )\n  }\n\n  export default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}